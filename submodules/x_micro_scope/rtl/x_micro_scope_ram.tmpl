module x_micro_scope_ram (
   input    logic          i_clk,
   input    logic          i_rst, 
   input    logic          i_wen, 
   input    logic [10:0]   i_waddr,
   input    logic [31:0]   i_wdata,
   input    logic          i_ren,
   input    logic [10:0]   i_raddr,
   output   logic [31:0]   o_rdata
);

   logic [2:0]    waddr_i;
   logic [7:0]    waddr_m;
   logic [15:0]   wdata_l;
   logic [15:0]   wdata_u;

   logic [2:0]    raddr_i;
   logic [7:0]    raddr_m;

   logic [2:0]    raddr_i_q;

   assign {waddr_i,waddr_m} = i_waddr;
   assign wdata_l           = i_wdata[15:0]; 
   assign wdata_u           = i_wdata[31:16];

   assign {raddr_i,raddr_m} = i_raddr;

   always@(posedge i_clk or posedge i_rst) begin 
      if(i_rst)      raddr_i_q <= 'd0;
      else           raddr_i_q <= raddr_i; 
   end 

+for i in range(8):    

   logic          wen_@i@; 
   logic [15:0]   rdata_@i@_l;
   logic [15:0]   rdata_@i@_u;
   logic [31:0]   rdata_@i@;

   assign wen_@i@ = i_wen & (waddr_i == 'd@i@);
   
   assign rdata_@i@ = {rdata_@i@_u,rdata_@i@_l};

   x_mem u_mem_@i@_l(
      .i_rst    (i_rst         ),
      .i_clk    (i_clk         ), 
      .i_wen    (wen_@i@       ), 
      .i_waddr  (waddr_m       ),
      .i_wdata  (wdata_l       ), 
      .i_ren    (1'b1          ),
      .i_raddr  (raddr_m       ),
      .o_rdata  (rdata_@i@_l   )
   ); 

   x_mem u_mem_@i@_u(
      .i_rst    (i_rst         ),
      .i_clk    (i_clk         ), 
      .i_wen    (wen_@i@       ), 
      .i_waddr  (waddr_m       ),
      .i_wdata  (wdata_u       ), 
      .i_ren    (1'b1          ),
      .i_raddr  (raddr_m       ),
      .o_rdata  (rdata_@i@_u   )
   ); 
-


   always_comb begin
      o_rdata = 'd0;
      case(raddr_i_q)
+for i in range(8):    
         'd@i@: o_rdata = rdata_@i@;
-
      endcase
   end


   

endmodule


