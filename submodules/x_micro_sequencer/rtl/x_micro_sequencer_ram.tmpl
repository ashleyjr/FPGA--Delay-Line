module x_micro_sequencer_ram (
   input    logic          i_clk,
   input    logic          i_rst, 
   input    logic          i_wen, 
   input    logic [8:0]    i_waddr,
   input    logic [39:0]   i_wdata,
   input    logic [8:0]    i_raddr,
   output   logic [39:0]   o_rdata
);

`ifdef SIM 
      logic [39:0] mem_q [511:0];

      // Write data
      generate
         for(genvar i=0;i<512;i++) begin
            
            logic wen = i_wen & (i_waddr == i);

            always_ff@(posedge i_clk or posedge i_rst) begin
               if(i_rst)      mem_q[i] <= 40'd0;
               else if(wen)   mem_q[i] <= i_wdata;
            end 
         end
      endgenerate

      // Read data 
      always_ff@(posedge i_clk or posedge i_rst) begin
         if(i_rst)   o_rdata <= 40'd0;
         else        o_rdata <= mem_q[i_raddr];
      end      

`else

+for i in range(5):    
      
      logic [15:0] rdata@i@;
      logic [15:0] wdata@i@;
   
      assign wdata@i@ = {
         1'bx,
         i_wdata[@i*8@+7],
         1'bx,
         i_wdata[@i*8@+6],
         1'bx,
         i_wdata[@i*8@+5],
         1'bx,
         i_wdata[@i*8@+4],
         1'bx,
         i_wdata[@i*8@+3],
         1'bx,
         i_wdata[@i*8@+2],
         1'bx,
         i_wdata[@i*8@+1],
         1'bx,
         i_wdata[@i*8@]
      };
    
      assign o_rdata[@((i+1)*8)-1@:@i*8@] = {
         rdata@i@[14],
         rdata@i@[12],
         rdata@i@[10],
         rdata@i@[8],
         rdata@i@[6],
         rdata@i@[4],
         rdata@i@[2],
         rdata@i@[0]
      };  

      SB_RAM40_4K #(
         .WRITE_MODE (32'sd1   ),
         .READ_MODE  (32'sd1   )
      ) u_ram@i@ ( 
         .RDATA      (rdata@i@ ),
         .RADDR      (i_raddr  ),
         .RCLK       (i_clk    ),
         .RCLKE      (1'b1     ),
         .RE         (1'b1     ),
         .WADDR      (i_waddr  ),
         .WCLK       (i_clk    ),
         .WCLKE      (1'b1     ),
         .WDATA      (wdata@i@ ),
         .WE         (i_wen    )
      );
-
`endif

endmodule


