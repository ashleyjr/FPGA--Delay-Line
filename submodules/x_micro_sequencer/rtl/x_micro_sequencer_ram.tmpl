module x_micro_sequencer_ram (
   input    logic          i_clk,
   input    logic          i_rst,
   input    logic          i_addr,
   input    logic          i_wen, 
   input    logic [8:0]    i_waddr,
   input    logic [39:0]   i_wdata,
   input    logic [8:0]    i_raddr,
   output   logic [39:0]   o_rdata
);

   `ifdef SYNTH  
      
+for i in range(5):    
      SB_RAM40_4K #(
         .WRITE_MODE (32'sd0                       ),
         .READ_MODE  (32'sd0                       )
      ) u_ram@i@ (
         .MASK       (16'hxxxx                     ),
         .RDATA      (o_rdata[@((i+1)*8)-1@:@i*8@] ),
         .RADDR      (i_raddr                      ),
         .RCLK       (i_clk                        ),
         .RCLKE      (1'b1                         ),
         .RE         (1'b1                         ),
         .WADDR      (i_waddr                      ),
         .WCLK       (i_clk                        ),
         .WCLKE      (1'b1                         ),
         .WDATA      (i_wdata[@((i+1)*8)-1@:@i*8@] ),
         .WE         (i_wen                        )
      );
-
   `else 
      logic [39:0] mem_q [511:0]

      // Write data
      generate
         for(genvar i=0;i<512;i++) begin
            
            logic wen = i_wen & (i_waddr == i);

            always_ff@(posedge i_clk or negedge i_nrst) begin
               if(i_rst)      mem_q[i] <= 40'd0;
               else if(wen)   mem_q[i] <= i_wdata;
            end 
         end
      endgenerate

      // Read data 
      always_ff@(posedge i_clk or negedge i_nrst) begin
         if(i_rst)      o_rdata <= 40'd0;
         else if(i_ren) o_rdata <= mem_q[i_raddr];
      end      

   `endif

endmodule


